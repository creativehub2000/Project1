name: Repo  CI

on:
 pull_request:
    branches: [develop, master]
 push:
    branches: [develop, master]
    
env:
  NODE_VERSION: '14.x'                                             # set this to the node version to use

jobs:

  Job1-Build-NodeApp:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
            
    - name: Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ env.NODE_VERSION }}
       
    - name: Install App dependencies
      run: npm ci
      # working-directory: ./nodeapp

    # - name: Do Node App Code Analysis NodeApp
    #   run: echo "Do code analysis here..."

    # - name: Upload Code coverage as Artifact
    #   run: echo "Upload code analysis coverage here..."

    - name: Run Unit Tests
      run: npm test

    - name: Deploy Test Report to GitHub Page
      if: ${{ always() }}
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.SEMANTIC_TOKEN }}
        publish_dir: ./public
        publish_branch: gh-pages
        allow_empty_commit: true

    # - name: Upload Test Report as Artifact
    #   if: ${{ always() }}
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: Test Report
    #     path: ./test-report.html
    #     if-no-files-found: ignore
    #     retention-days: 30


  # Job2-Run-Tests:
  #   needs: [Job1-Build-NodeApp]
  #   runs-on: ubuntu-latest

  #   steps:
  #   - name: Run Tests
  #     run: npm test


  # Job3-Upload-Test-Failure-Report:
  #   runs-on: ubuntu-latest
  #   if: ${{ always() && contains(join(needs.*.result, ','), 'failure') }}
  #   needs: [Job2-Run-Tests]

  #   steps:
  #   - name: Upload Test coverage as Artifact
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: test_coverage
  #       path: ./test-report.html
  

  Job2-Create-Issue:
    # needs: [Job1-Build-NodeApp]
    runs-on: ubuntu-latest
    if: ${{ always() && contains(join(needs.*.result, ','), 'failure') }}
    needs: [Job1-Build-NodeApp]
    # if: ${{ failure() }}

    steps:
    - name: Create Issue
      uses: nashmaniac/create-issue-action@v1.1
      with:
        title: Automated Issue from workflow
        token: ${{secrets.SEMANTIC_TOKEN}}
        assignees: ${{github.actor}}
        labels: test-failed
        body: "Test Report is out. <$https://creativehub2000.github.io/Project1/index.html|check it now.>"
        # body: This issue was automatically created by GitHub ${{github.sha}}

      # - name: Build project
      # run: npm run build
      # working-directory: ./nodeapp

    # - name: Upload Build folder as Artifact
    #   if: github.event_name == 'push'
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: Build
    #     path: ./nodeapp/build

  # Job2-Deploy-NodeApp:
  #   needs: [Job1-Build-NodeApp]
  #   runs-on: ubuntu-latest
    # environment: 
    #   name: staging
    #   url:  https://stagingdeploy.azurewebsites.net         # set application url

    # steps:
    # - name: Deploy to Node App Staging Server
    #   run: echo "Deploy Node App build to staging here..."
      
    # - name: Create Issue Action
    #   if: ${{ failure() }}
    #   uses: nashmaniac/create-issue-action@v1.1
    #   with:
    #     title: Automated Issue from 
    #     token: ${{secrets.SEMANTIC_TOKEN}}
    #     assignees: ${{github.actor}}
    #     labels: workflow-failed
    #     body: This issue was automatically created by GitHub ${{github.sha}} 
